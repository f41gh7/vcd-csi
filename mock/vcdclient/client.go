// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/vcd-client/client.go

// Package mock_vcd_client is a generated GoMock package.
package mock_vcd_client

import (
	vcd_client "github.com/f41gh7/vcd-csi/pkg/vcd-client"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVcdService is a mock of VcdService interface
type MockVcdService struct {
	ctrl     *gomock.Controller
	recorder *MockVcdServiceMockRecorder
}

// MockVcdServiceMockRecorder is the mock recorder for MockVcdService
type MockVcdServiceMockRecorder struct {
	mock *MockVcdService
}

// NewMockVcdService creates a new mock instance
func NewMockVcdService(ctrl *gomock.Controller) *MockVcdService {
	mock := &MockVcdService{ctrl: ctrl}
	mock.recorder = &MockVcdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVcdService) EXPECT() *MockVcdServiceMockRecorder {
	return m.recorder
}

// CreateDisk mocks base method
func (m *MockVcdService) CreateDisk(vdc, diskName, profile string, capacityBytes int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisk", vdc, diskName, profile, capacityBytes)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisk indicates an expected call of CreateDisk
func (mr *MockVcdServiceMockRecorder) CreateDisk(vdc, diskName, profile, capacityBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk", reflect.TypeOf((*MockVcdService)(nil).CreateDisk), vdc, diskName, profile, capacityBytes)
}

// ListVolumes mocks base method
func (m *MockVcdService) ListVolumes() ([]*vcd_client.VolumeWithCap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes")
	ret0, _ := ret[0].([]*vcd_client.VolumeWithCap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockVcdServiceMockRecorder) ListVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockVcdService)(nil).ListVolumes))
}

// DeleteDisk mocks base method
func (m *MockVcdService) DeleteDisk(diskName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisk", diskName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisk indicates an expected call of DeleteDisk
func (mr *MockVcdServiceMockRecorder) DeleteDisk(diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisk", reflect.TypeOf((*MockVcdService)(nil).DeleteDisk), diskName)
}

// DetachDisk mocks base method
func (m *MockVcdService) DetachDisk(vmName, diskName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachDisk", vmName, diskName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachDisk indicates an expected call of DetachDisk
func (mr *MockVcdServiceMockRecorder) DetachDisk(vmName, diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk", reflect.TypeOf((*MockVcdService)(nil).DetachDisk), vmName, diskName)
}

// AttachDisk mocks base method
func (m *MockVcdService) AttachDisk(vmName, diskName string) (*vcd_client.DiskAttachParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachDisk", vmName, diskName)
	ret0, _ := ret[0].(*vcd_client.DiskAttachParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachDisk indicates an expected call of AttachDisk
func (mr *MockVcdServiceMockRecorder) AttachDisk(vmName, diskName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk", reflect.TypeOf((*MockVcdService)(nil).AttachDisk), vmName, diskName)
}
