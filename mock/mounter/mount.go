// Code generated by MockGen. DO NOT EDIT.
// Source: internal/mount/mounter.go

// Package mock_mount is a generated GoMock package.
package mock_mount

import (
	mount "github.com/f41gh7/vcd-csi/internal/mount"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMounter is a mock of Mounter interface
type MockMounter struct {
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// Format mocks base method
func (m *MockMounter) Format(source, fsType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", source, fsType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Format indicates an expected call of Format
func (mr *MockMounterMockRecorder) Format(source, fsType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockMounter)(nil).Format), source, fsType)
}

// Mount mocks base method
func (m *MockMounter) Mount(source, target, fsType string, options ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{source, target, fsType}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Mount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mount indicates an expected call of Mount
func (mr *MockMounterMockRecorder) Mount(source, target, fsType interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{source, target, fsType}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockMounter)(nil).Mount), varargs...)
}

// Unmount mocks base method
func (m *MockMounter) Unmount(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmount indicates an expected call of Unmount
func (mr *MockMounterMockRecorder) Unmount(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMounter)(nil).Unmount), target)
}

// IsFormatted mocks base method
func (m *MockMounter) IsFormatted(source string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFormatted", source)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFormatted indicates an expected call of IsFormatted
func (mr *MockMounterMockRecorder) IsFormatted(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFormatted", reflect.TypeOf((*MockMounter)(nil).IsFormatted), source)
}

// IsMounted mocks base method
func (m *MockMounter) IsMounted(target string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted
func (mr *MockMounterMockRecorder) IsMounted(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*MockMounter)(nil).IsMounted), target)
}

// GetStatistics mocks base method
func (m *MockMounter) GetStatistics(volumePath string) (mount.VolumeStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", volumePath)
	ret0, _ := ret[0].(mount.VolumeStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics
func (mr *MockMounterMockRecorder) GetStatistics(volumePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockMounter)(nil).GetStatistics), volumePath)
}

// IsBlockDevice mocks base method
func (m *MockMounter) IsBlockDevice(volumePath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlockDevice", volumePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlockDevice indicates an expected call of IsBlockDevice
func (mr *MockMounterMockRecorder) IsBlockDevice(volumePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlockDevice", reflect.TypeOf((*MockMounter)(nil).IsBlockDevice), volumePath)
}

// GetDiskNameBySizeAndUnit mocks base method
func (m *MockMounter) GetDiskNameBySizeAndUnit(size, unit, bus string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiskNameBySizeAndUnit", size, unit, bus)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiskNameBySizeAndUnit indicates an expected call of GetDiskNameBySizeAndUnit
func (mr *MockMounterMockRecorder) GetDiskNameBySizeAndUnit(size, unit, bus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiskNameBySizeAndUnit", reflect.TypeOf((*MockMounter)(nil).GetDiskNameBySizeAndUnit), size, unit, bus)
}
